---
export interface Props {
  title?: string;
  subtitle?: string;
  buttonText?: string;
  className?: string;
  labels?: {
    firstName: string;
    lastName: string;
    email: string;
    phone: string;
    submit: string;
    privacy: string;
    firstNamePlaceholder: string;
    lastNamePlaceholder: string;
    emailPlaceholder: string;
    phonePlaceholder: string;
  };
}

const { 
  title = "Reserva tu experiencia",
  subtitle = "Completa el formulario y nos pondremos en contacto contigo para confirmar tu reserva",
  buttonText = "Enviar solicitud",
  className = "",
  labels = {
    firstName: "Nombre *",
    lastName: "Apellido *", 
    email: "Correo electrÃ³nico *",
    phone: "NÃºmero de telÃ©fono *",
    submit: "Enviar solicitud",
    privacy: "Al enviar este formulario, aceptas que nos pongamos en contacto contigo para procesar tu reserva.",
    firstNamePlaceholder: "Tu nombre",
    lastNamePlaceholder: "Tu apellido",
    emailPlaceholder: "tu@email.com",
    phonePlaceholder: "123456789"
  }
} = Astro.props;
---

<div class={`booking-form-container ${className}`}>
  {title && (
    <div class="text-center mb-8">
      <h2 class="text-3xl md:text-4xl font-bold text-brand-dark font-georgia mb-4 leading-tight">
        {title}
      </h2>
      {subtitle && (
        <p class="text-gray-600 text-lg font-gotham max-w-2xl mx-auto">
          {subtitle}
        </p>
      )}
    </div>
  )}

  <form class="booking-form max-w-2xl mx-auto bg-white rounded-2xl shadow-xl p-8 border border-gray-100 mb-8" id="bookingForm">
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
      <div class="form-group">
        <label for="firstName" class="block text-sm font-semibold text-brand-dark mb-2 font-gotham">
          {labels.firstName}
        </label>
        <input
          type="text"
          id="firstName"
          name="firstName"
          required
          class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#F2AB27] focus:border-transparent transition-all duration-200 font-gotham text-gray-700 bg-gray-50 focus:bg-white"
          placeholder={labels.firstNamePlaceholder}
        />
        <span class="error-message text-red-500 text-sm hidden"></span>
      </div>

      <div class="form-group">
        <label for="lastName" class="block text-sm font-semibold text-brand-dark mb-2 font-gotham">
          {labels.lastName}
        </label>
        <input
          type="text"
          id="lastName"
          name="lastName"
          required
          class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#F2AB27] focus:border-transparent transition-all duration-200 font-gotham text-gray-700 bg-gray-50 focus:bg-white"
          placeholder={labels.lastNamePlaceholder}
        />
        <span class="error-message text-red-500 text-sm hidden"></span>
      </div>
    </div>

    <div class="form-group mb-6">
      <label for="email" class="block text-sm font-semibold text-brand-dark mb-2 font-gotham">
        {labels.email}
      </label>
      <input
        type="email"
        id="email"
        name="email"
        required
        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#F2AB27] focus:border-transparent transition-all duration-200 font-gotham text-gray-700 bg-gray-50 focus:bg-white"
        placeholder={labels.emailPlaceholder}
      />
      <span class="error-message text-red-500 text-sm hidden"></span>
    </div>

    <div class="form-group mb-8">
      <label for="phone" class="block text-sm font-semibold text-brand-dark mb-2 font-gotham">
        {labels.phone}
      </label>
      <div class="flex gap-3">
        <select
          id="countryCode"
          name="countryCode"
          required
          class="px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#F2AB27] focus:border-transparent transition-all duration-200 font-gotham text-gray-700 bg-gray-50 focus:bg-white min-w-[120px]"
        >
          <option value="+51">ðŸ‡µðŸ‡ª +51</option>
          <option value="+1">ðŸ‡ºðŸ‡¸ +1</option>
          <option value="+44">ðŸ‡¬ðŸ‡§ +44</option>
          <option value="+34">ðŸ‡ªðŸ‡¸ +34</option>
          <option value="+33">ðŸ‡«ðŸ‡· +33</option>
          <option value="+49">ðŸ‡©ðŸ‡ª +49</option>
          <option value="+39">ðŸ‡®ðŸ‡¹ +39</option>
          <option value="+55">ðŸ‡§ðŸ‡· +55</option>
          <option value="+52">ðŸ‡²ðŸ‡½ +52</option>
          <option value="+54">ðŸ‡¦ðŸ‡· +54</option>
          <option value="+56">ðŸ‡¨ðŸ‡± +56</option>
          <option value="+57">ðŸ‡¨ðŸ‡´ +57</option>
          <option value="+593">ðŸ‡ªðŸ‡¨ +593</option>
          <option value="+58">ðŸ‡»ðŸ‡ª +58</option>
          <option value="+506">ðŸ‡¨ðŸ‡· +506</option>
          <option value="+507">ðŸ‡µðŸ‡¦ +507</option>
        </select>
        <input
          type="tel"
          id="phone"
          name="phone"
          required
          class="flex-1 w-10 px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#F2AB27] focus:border-transparent transition-all duration-200 font-gotham text-gray-700 bg-gray-50 focus:bg-white"
          placeholder={labels.phonePlaceholder}
        />
      </div>
      <span class="error-message text-red-500 text-sm hidden"></span>
    </div>

    <!-- Loading and Success States -->
    <div id="loadingState" class="text-center hidden mb-6">
      <div class="inline-flex items-center px-4 py-2 font-semibold leading-6 text-sm shadow rounded-md text-white bg-[#D99D55] transition ease-in-out duration-150">
        <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        Enviando solicitud...
      </div>
    </div>

    <div id="successState" class="text-center hidden mb-6">
      <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded-lg">
        <div class="flex items-center justify-center mb-2">
          <svg class="w-6 h-6 text-green-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
          </svg>
          <strong>Â¡Solicitud enviada exitosamente!</strong>
        </div>
        <p class="text-sm">Nos pondremos en contacto contigo dentro de las prÃ³ximas 24 horas.</p>
      </div>
    </div>

    <div id="errorState" class="text-center hidden mb-6">
      <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg">
        <div class="flex items-center justify-center mb-2">
          <svg class="w-6 h-6 text-red-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <strong>Error al enviar</strong>
        </div>
        <p class="text-sm" id="errorMessage">Ha ocurrido un error. Por favor, intÃ©ntalo de nuevo.</p>
      </div>
    </div>

    <button
      type="submit"
      id="submitButton"
      class="w-full bg-brand-dark hover:bg-opacity-90 text-white font-semibold py-4 px-8 rounded-lg transition-all duration-300 transform hover:scale-[1.02] focus:ring-4 focus:ring-[#F2AB27] focus:ring-opacity-50 font-gotham text-lg shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
    >
      {labels.submit}
    </button>

    <p class="text-xs text-gray-500 text-center mt-4 font-gotham">
      {labels.privacy}
    </p>
  </form>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const form = document.getElementById('bookingForm') as HTMLFormElement;
  const submitButton = document.getElementById('submitButton') as HTMLButtonElement;
  const loadingState = document.getElementById('loadingState');
  const successState = document.getElementById('successState');
  const errorState = document.getElementById('errorState');
  const errorMessage = document.getElementById('errorMessage');

  if (!form || !submitButton || !loadingState || !successState || !errorState || !errorMessage) {
    console.error('Required form elements not found');
    return;
  }

  // Form validation
  function validateField(field: HTMLInputElement | HTMLSelectElement): boolean {
    const value = field.value.trim();
    const errorElement = field.parentElement?.querySelector('.error-message') as HTMLElement;
    
    // Clear previous errors
    field.classList.remove('border-red-500');
    if (errorElement) {
      errorElement.classList.add('hidden');
      errorElement.textContent = '';
    }

    if (!value && field.hasAttribute('required')) {
      showFieldError(field, 'Este campo es requerido');
      return false;
    }

    if (field.type === 'email' && value) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(value)) {
        showFieldError(field, 'Por favor, ingresa un email vÃ¡lido');
        return false;
      }
    }

    if (field.name === 'phone' && value) {
      const phoneRegex = /^[0-9]{6,15}$/;
      if (!phoneRegex.test(value.replace(/\s/g, ''))) {
        showFieldError(field, 'Por favor, ingresa un nÃºmero de telÃ©fono vÃ¡lido');
        return false;
      }
    }

    return true;
  }

  function showFieldError(field: HTMLInputElement | HTMLSelectElement, message: string): void {
    const errorElement = field.parentElement?.querySelector('.error-message') as HTMLElement;
    field.classList.add('border-red-500');
    if (errorElement) {
      errorElement.textContent = message;
      errorElement.classList.remove('hidden');
    }
  }

  function hideAllStates(): void {
    if (loadingState) loadingState.classList.add('hidden');
    if (successState) successState.classList.add('hidden');
    if (errorState) errorState.classList.add('hidden');
  }

  function showLoadingState(): void {
    hideAllStates();
    if (loadingState) loadingState.classList.remove('hidden');
    submitButton.disabled = true;
  }

  function showSuccessState(): void {
    hideAllStates();
    if (successState) successState.classList.remove('hidden');
    submitButton.disabled = false;
    form.reset(); // Clear the form
  }

  function showErrorState(message: string = 'Ha ocurrido un error. Por favor, intÃ©ntalo de nuevo.'): void {
    hideAllStates();
    if (errorMessage) errorMessage.textContent = message;
    if (errorState) errorState.classList.remove('hidden');
    submitButton.disabled = false;
  }

  // Real-time validation
  const inputs = form.querySelectorAll('input, select') as NodeListOf<HTMLInputElement | HTMLSelectElement>;
  inputs.forEach(input => {
    input.addEventListener('blur', () => validateField(input));
    input.addEventListener('input', () => {
      if (input.classList.contains('border-red-500')) {
        validateField(input);
      }
    });
  });

  // Form submission
  form.addEventListener('submit', async function(e: Event) {
    e.preventDefault();

    // Validate all fields
    let isValid = true;
    inputs.forEach(input => {
      if (!validateField(input)) {
        isValid = false;
      }
    });

    if (!isValid) {
      return;
    }

    showLoadingState();

    try {
      const formData = new FormData(form);
      console.log('Submitting form data:', Object.fromEntries(formData.entries()));
      
      const response = await fetch('/api/booking', {
        method: 'POST',
        body: formData,
      });

      console.log('Response status:', response.status);
      console.log('Response headers:', Object.fromEntries(response.headers.entries()));

      const result = await response.json();
      console.log('API result:', result);

      if (result.success) {
        showSuccessState();
        
        // Optional: Track the conversion with analytics
        if (typeof (window as any).gtag !== 'undefined') {
          (window as any).gtag('event', 'booking_submitted', {
            event_category: 'engagement',
            event_label: 'booking_form',
          });
        }
      } else {
        showErrorState(result.error || 'Error al enviar la solicitud');
      }
    } catch (error) {
      console.error('Form submission error:', error);
      showErrorState('Error de conexiÃ³n. Por favor, verifica tu conexiÃ³n a internet e intÃ©ntalo de nuevo.');
    }
  });
});
</script>
</div>

<style>
  .booking-form-container {
    @apply relative;
  }

  .form-group input:focus,
  .form-group select:focus {
  }

  .form-group input::placeholder {
  }

  /* Custom styles for better mobile experience */
  @media (max-width: 768px) {
    .booking-form {
    }
  }
</style>
